08.07.2020
to do:
- write the 'case' to json (apparently not possible on github pages - need to go somewhere else to use node)
- implement notifications for passive users if new case
- save the map as new case and show it in cases (map.png??)
- create archive (json file ready but incomplete)
- translate to spanish and implement the english button
- in json also write status 'police called'
- implement taking picture and save it (node), add to json
- first view only menu + call button + map, after map -> details -> picture (everytime add to json)

02.07.2020

implemented arrows (at the moment only the green ones, the red ones are in the folder but not programmed yet. The aim is to change on Click the green arrow to the red one and then submit the case. Yet not implemented the time as time stamp for the case.

mobile view should be fine, otherwise adapt the css

implemented 3 forms in "Details". Still to implement the functionality and the submit button -> update the case created with arrow

also here mobile view should be fine

01.07.2020


used this one to implement map : "https://www.digitalocean.com/community/tutorials/how-to-integrate-the-google-maps-api-into-react-applications"

Here the old code:
/*############################################################################*/
/*import React, { useState} from 'react'
import { GoogleMap, LoadScript } from '@react-google-maps/api';

var x = document.getElementById("mapholder");

const containerStyle = {
  width: '400px',
  height: '400px'
};

const center = {
  lat: 41,
  lng: 2
};
function getPosition(position) {
center.lat = position.coords.latitude;
center.lng = position.coords.longitude;
}
 
function Map() {
const [map, setMap] = useState(null)


  const onLoad = React.useCallback(function callback(map) {
    if (navigator.geolocation) {
  navigator.geolocation.getCurrentPosition(getPosition);
} else { 
  x.innerHTML = "Geolocation is not supported by this browser.";
}
    const bounds = new window.google.maps.LatLngBounds();
    map.fitBounds(bounds);
    setMap(map)
  }, [])
 
  const onUnmount = React.useCallback(function callback(map) {
    setMap(null)
  }, [])

  return (
    <LoadScript
      googleMapsApiKey="AIzaSyCGpc8kGF95sQU2Ky8lf3YHl5Y-E8-eRoM"
    >
      <GoogleMap
        mapContainerStyle={containerStyle}
        center={center}
        zoom={2}
        onLoad={onLoad}
        onUnmount={onUnmount}
      >

        <></>
      </GoogleMap>
        <div className="MainContainer" id="mapholder"></div>
    </LoadScript>
  )
}
 
export default Map;
*/
30.06.2020

Inserted pictures. Adapted css.
Component 'map' should render the real location
Component 'details' should render a form with diverse data like 'what happened', 'injured person/s', 'what's missing'
Component 'foto'should render a picture taken with the smartphone.

In order to use the geo location through google API for maps it needs a key. For the key it is necessary to join the google cloud platform and to open a new project. Once you have a key it is a good idea to limit the use of the key to your own page. You can use a format like "http://www.yourpage.com/*. If the page is accessible with http and https you have to put both urls in the limitations.

29.06.2020

After changing some code i wanted to deploy app. The result was "published" but I couldn't see the new app. It only worked after I changed the default branch in gitHub pages to master and then back to gh-pages

new icons so we have a consistent look
mobile menu -> only icon 'open menu', on click 'open menu' not shown but the mobile menu

28.06.2020
In order to use a react app on github we have to prepare the whole thing a little bit. I followed this procedure:
1. Create an empty repository on GitHub.
2. Create a new React app on your computer with 
    $ create-react-app your_app_name
3. Install the gh-pages package as a "dev-dependency" of the app with 
    $ cd your_app_name
    $ npm install gh-pages --save-dev
4. Add some properties to the app's package.json file (this got created as you create the react app)

in the first line add: 
//...
"homepage": "http://your_gitname.github.io/your_app_name"

in the scripts lines (just look below)
"scripts": {
  //...
  "predeploy": "npm run build",
  "deploy": "gh-pages -d build"
}

5. Create a git repository in the app's folder with
$ git init

6. Add the GitHub repository as a "remote" in your local git repository with
$ git remote add origin https://github.com/your_gitname/your_app_name.git

7. Generate a production build of your app, and deploy it to GitHub Pages with
$ npm run deploy

As I know, you have to do this everytime you change your code. The repository has two branches, master and gh-pages. When you push, you push to master,
gh-pages doesn't get automatically the new code (at least not yet). deploying means you create a new verion of the react app and publish it on github 
in branch 'gh-pages'

8. Optionally, commit your source code to the "master" branch and push your commit to GitHub with
$ git add .
$ git commit -m "your comment"
$ git push origin master

Here is the link to the tutorial I followed: https://github.com/gitname/react-gh-pages
Here an other link to a similar one: https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f
And an other one for doing rather manually: https://levelup.gitconnected.com/deploying-your-react-website-to-github-pages-ac0e24601bdf

Here if you created the wrong remote in number '6':

git remote - v
Will display origin and the wrong remote url
To delete it
git remote rm origin
Then check again
git remote - v
Will display nothing time to add the right one
